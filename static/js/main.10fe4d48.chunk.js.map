{"version":3,"sources":["services/CityService.js","components/Table/Table.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js","components/Home/Home.module.css"],"names":["url","getData","country","a","maxCount","fetch","response","ok","message","status","Error","json","content","filter","f","i","Table","columns","data","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","useState","filterInput","setFilterInput","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","getRowProps","cells","cell","getCellProps","nf","Intl","NumberFormat","Home","setData","setCountry","useEffect","result","console","log","length","catch","error","name","useMemo","Header","accessor","id","Cell","code","toFlag","style","color","background","format","props","styles","topRow","topColumn","selector","defaultValue","evt","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.10fe4d48.chunk.js","sourcesContent":["const url = \"https://tnobile.github.io/data-world-cities/\";\n\nexport const getData = async (country, maxCount = 100) => {\n    var response = await fetch(url + country);\n    if (!response.ok) {\n        const message = `An error has occured: ${response.status}`;\n        throw new Error(message);\n    }\n    var content = await response.json();\n    if (maxCount <= 0) {\n        return content;\n    }\n    return content.filter((f, i) => i < maxCount);\n}\n","import { useState } from 'react'\nimport { useFilters, useSortBy, useTable } from 'react-table'\n\nconst Table = ({ columns, data }) => {\n    const {\n        getTableProps, // table props from react-table\n        getTableBodyProps, // table body props from react-table\n        headerGroups, // headerGroups, if your table has groupings\n        rows, // rows for the table based on the data passed\n        prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\n        setFilter // useFilter Hook \n    } = useTable({\n        columns,\n        data\n    },\n        useFilters,\n        useSortBy\n    );\n    const [filterInput, setFilterInput] = useState('');\n\n    const handleFilterChange = (e) => {\n        const value = e.target.value || undefined;\n        setFilter(\"city\", value);\n        setFilterInput(value);\n    }\n    return (\n        <>\n            <input\n                value={filterInput}\n                onChange={handleFilterChange}\n                placeholder={\"Search city name\"}\n            />\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => \n                                <th\n                                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                                    className={\n                                        column.isSorted\n                                            ? column.isSortedDesc\n                                                ? \"sort-desc\"\n                                                : \"sort-asc\"\n                                            : \"\" }>\n                                    {column.render(\"Header\")}\n                                </th>\n                            )}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </>\n    );\n    // return (\n    //     <table>\n    //         <tbody>\n    //             {data.map((d, i) => <City key={i} row={i} city={d}></City>)}\n    //         </tbody>\n    //     </table>\n    // )\n}\n\nexport default Table;","import { getData } from '../../services/CityService'\nimport React, { useState, useEffect, useMemo } from 'react'\nimport Table from '../Table/Table'\nimport styles from './Home.module.css'\n\nconst toFlag = (code) => {\n    switch (code) {\n        case \"ES\": return \"ðŸ‡ªðŸ‡¸\";\n        case \"JP\": return \"ðŸ‡¯ðŸ‡µ\";\n        case \"GB\": return \"ðŸ‡¬ðŸ‡§\";\n        case \"AR\": return \"ðŸ‡¦ðŸ‡·\";\n        case \"CN\": return \"ðŸ‡¨ðŸ‡³\";\n        case \"CH\": return \"ðŸ‡¨ðŸ‡­\";\n        case \"IT\": return \"ðŸ‡®ðŸ‡¹\";\n        case \"FR\": return \"ðŸ‡«ðŸ‡·\";\n        case \"US\": return \"ðŸ‡ºðŸ‡¸\";\n        case \"DE\": return \"ðŸ‡©ðŸ‡ª\";\n        default: return code;\n    }\n}\nconst nf = new Intl.NumberFormat();\n\nconst Home = () => {\n    const [data, setData] = useState([]);\n    const [country, setCountry] = useState(\"gb\")\n    useEffect(() => {\n        // 1. with then\n        // getData().then(d => {\n        //     console.log(\"got\", d);\n        //     setData(d);\n        // }).catch(e => { console.log(\"failed in fetch\", e.message) });\n\n        // 2. with function\n        // const fetchData = async () => {\n        //     try {\n        //         const result = await getData(country);\n        //         console.log(`got ${result.length}`)\n        //         setData(result);\n        //     } catch (e) {\n        //         setData([]);\n        //         console.log(`${e.name}:${e.message}`);\n        //     }\n        // }\n        // fetchData();\n\n        // 3. immediately executed function for async purpose\n        (async () => {\n            //try {\n            const result = await getData(country, 100);\n            console.log(`got ${result.length}  for ${country}`)\n            setData(result);\n            //} catch (e) {\n            //    setData([]);\n            //    console.log(`${e.name}:${e.message}`);\n            //}\n        })().catch(e => {\n            setData([]);\n            console.error(`${e.name}:${e.message}`)\n        });\n    }, [country])\n    const handleCountryChange = (evt) => {\n        setCountry(evt.target.value);\n    }\n    const columns = useMemo(() => [\n        {\n            Header: \"Cities\",\n            columns: [\n                {\n                    Header: \"Name\",\n                    accessor: \"city\"\n                },\n                {\n                    Header: \"Name(admin)\",\n                    accessor: \"admin_name\"\n                },\n                {\n                    Header: \"Country\",\n                    accessor: \"country\"\n                },\n                {\n                    Header: \"Code\",\n                    accessor: \"iso2\",\n                    id: \"flag\",\n                    Cell: ({ cell: { value } }) => <span className=\"badge\">{value}</span>\n                },\n                {\n                    Header: \"Flag\",\n                    accessor: \"iso2\",\n                    Cell: ({ cell: { value } }) => toFlag(value)\n                },\n                {\n                    Header: \"Capital\",\n                    accessor: \"capital\"\n                }\n            ]\n        },\n        {\n            Header: \"Details\",\n            columns: [{\n                Header: \"Population\",\n                accessor: \"population\",\n                style: { \"text-align\": \"right\", color: \"pink\", background: \"green\" },\n                Cell: ({ cell: { value } }) => { return nf.format(value) }\n            },\n            {\n                Header: \"Population(Proper)\",\n                accessor: \"population_proper\",\n                Cell: props => {\n                    console.log(props.cell);\n                    return <div style={{ \"textAlign\": 'right', \"color\": \"purple\", \"background\": \"lightblue\" }}>\n                        {nf.format(props.cell.value)}</div>\n                }\n            },\n            {\n                Header: \"Latitude\",\n                accessor: \"lat\"\n            },\n            {\n                Header: \"Longitudo\",\n                accessor: \"lng\"\n            }]\n        }\n    ], [])\n    return (\n        <>\n            <div className={styles.topRow}>\n                <div className={styles.topColumn}>Country/City Data</div>\n                <div className={styles.topColumn}>\n                    <select className={styles.selector}\n                        name='country' defaultValue={country} onChange={handleCountryChange}>\n                        <option value=\"jp\" name=\"jp\">Japan</option>\n                        <option value=\"gb\" name=\"gb\">UK</option>\n                        <option value=\"ch\" name=\"ch\">Switzerland</option>\n                        <option value=\"ar\" name=\"ar\">Argentina</option>\n                        <option value=\"cn\" name=\"cn\">China</option>\n                        <option value=\"de\" name=\"de\">Germany</option>\n                        <option value=\"es\" name=\"es\">Spain</option>\n                        <option value=\"fr\" name=\"fr\">France</option>\n                    </select>\n                </div>\n                <div className={styles.topColumn}>\n                    <a href='https://tnobile.github.io/data-world-cities/'>source</a>\n                </div>\n            </div>\n            {\n                data && data.length > 0 &&\n                <Table columns={columns} data={data}></Table>\n            }\n            { data && data.length === 0 && <h2>No data for {country}</h2>} </>\n    )\n}\n\n\nexport default Home;","import './App.css';\nimport Home from './components/Home/Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"Home_selector__2VNFS\",\"source\":\"Home_source__13bXq\",\"topColumn\":\"Home_topColumn__1oQlN\",\"topRow\":\"Home_topRow__9XaAO\"};"],"sourceRoot":""}