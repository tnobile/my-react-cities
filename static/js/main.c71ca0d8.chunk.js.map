{"version":3,"sources":["services/CityService.js","components/Table/Table.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js","components/Table/Table.module.scss","components/Home/Home.module.css"],"names":["url","getData","country","a","maxCount","fetch","response","ok","message","status","Error","json","content","filter","f","i","GlobalFilter","preGlobalFilteredRows","setGlobalFilter","globalFilter","globalFilterInput","setGlobalFilterInput","count","length","onChange","useAsyncDebounce","value","undefined","e","target","placeholder","Table","columns","data","useTable","initialState","pageIndex","pageSize","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","setFilter","useState","filterInput","setFilterInput","totalCount","setTotalCout","useEffect","console","log","className","styles","searchRow","searchColumn","btnReset","onClick","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","getRowProps","cells","cell","getCellProps","pagination","disabled","type","defaultValue","Number","style","width","nf","Intl","NumberFormat","Home","setData","setCountry","result","catch","error","name","useMemo","Header","accessor","id","Cell","code","toFlag","color","background","format","props","topRow","topColumn","selector","evt","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c71ca0d8.chunk.js","sourcesContent":["const url = \"https://tnobile.github.io/data-world-cities/\";\n\nexport const getData = async (country, maxCount = 100) => {\n    var response = await fetch(url + country);\n    if (!response.ok) {\n        const message = `An error has occured: ${response.status}`;\n        throw new Error(message);\n    }\n    var content = await response.json();\n    if (maxCount <= 0) {\n        return content;\n    }\n    return content.filter((f, i) => i < maxCount);\n}\n","import { useEffect, useState } from 'react'\nimport { useFilters, useGlobalFilter, useSortBy, useTable, useAsyncDebounce, usePagination } from 'react-table'\nimport styles from './Table.module.scss'\n//import \"react-table/react-table.css\"\n\n\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n    globalFilterInput,\n    setGlobalFilterInput,\n}) {\n    const count = preGlobalFilteredRows.length\n    //const [value, setValue] = useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <input\n            value={globalFilterInput || \"\"}\n            onChange={e => {\n                setGlobalFilterInput(e.target.value);\n                onChange(e.target.value);\n            }}\n            placeholder={`Global search with ${count} records...`}\n        />\n    )\n}\n\nconst Table = ({ columns, data }) => {\n    const {\n        getTableProps, // table props from react-table\n        getTableBodyProps, // table body props from react-table\n        headerGroups, // headerGroups, if your table has groupings\n        //rows, // rows for the table based on the data passed\n        prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\n\n        page, // Instead of using 'rows', we'll use page,\n        // which has only the rows for the active page\n\n        // The rest of these things are super handy, too ;)\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize, globalFilter },\n\n        setFilter, // useFilter Hook \n        preGlobalFilteredRows,\n        setGlobalFilter\n    } = useTable({\n        columns,\n        data,\n        initialState: { pageIndex: 0, pageSize: 20 }\n    },\n        useFilters,\n        useGlobalFilter,\n        useSortBy,\n        usePagination\n    );\n\n    const [filterInput, setFilterInput] = useState('');\n    const [globalFilterInput, setGlobalFilterInput] = useState('');\n    const [totalCount, setTotalCout] = useState(0);\n    const handleFilterChange = (e) => {\n        const value = e.target.value || undefined;\n        setFilter(\"city\", value);\n        setFilterInput(value);\n    }\n\n    useEffect(() => {\n        setFilterInput('');\n        setGlobalFilterInput('');\n        setTotalCout(data.length);\n        gotoPage(0);\n        console.log(`data changed with ${data.length} rows`);\n    }, [data, gotoPage, setPageSize]);\n\n    const onReset = () => {\n        setFilterInput('');\n        setGlobalFilterInput('');\n        setFilter(\"city\", undefined);\n        setGlobalFilter(undefined);\n    }\n\n    return (\n        <>\n            <div className={styles.searchRow} >\n                <div className={styles.searchColumn}>\n                    <input\n                        value={filterInput}\n                        onChange={handleFilterChange}\n                        placeholder={\"Search city name\"}\n                    />\n                </div>\n                <div className={styles.searchColumn}>\n                    <GlobalFilter\n                        preGlobalFilteredRows={preGlobalFilteredRows}\n                        globalFilter={globalFilter}\n                        setGlobalFilter={setGlobalFilter}\n                        setGlobalFilterInput={setGlobalFilterInput}\n                        globalFilterInput={globalFilterInput}\n                    />\n                </div>\n                <button className={styles.btnReset} onClick={onReset}>reset</button>\n            </div>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column =>\n                                <th\n                                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                                    className={\n                                        column.isSorted\n                                            ? column.isSortedDesc\n                                                ? \"sort-desc\"\n                                                : \"sort-asc\"\n                                            : \"\"}>\n                                    {column.render(\"Header\")}\n                                </th>\n                            )}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <div className={styles.pagination}>\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    {'<<'}\n                </button>{' '}\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    {'<'}\n                </button>{' '}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                    {'>'}\n                </button>{' '}\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    {'>>'}\n                </button>{' '}\n                <span>\n                    Page{' '}\n                    <strong>\n                        {pageIndex + 1} of {pageOptions.length}\n                    </strong>{' '}\n                </span>\n                <span>\n                    | Go to page:{' '}\n                    <input\n                        type=\"number\"\n                        value={pageIndex + 1}\n                        defaultValue={pageIndex + 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(page)\n                        }}\n                        style={{ width: '100px' }}\n                    />\n                </span>{' '}\n                <select\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                >\n                    {[10, 20, 30, 40, 50, totalCount].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n                <button onClick={e => { totalCount === pageSize ? setPageSize(10) : setPageSize(totalCount) }}>\n                    {totalCount === pageSize ? 'Paginate' : 'Show All ' + totalCount}</button>\n            </div>\n        </>\n    );\n    // return (\n    //     <table>\n    //         <tbody>\n    //             {data.map((d, i) => <City key={i} row={i} city={d}></City>)}\n    //         </tbody>\n    //     </table>\n    // )\n}\n\nexport default Table;","import { getData } from '../../services/CityService'\nimport React, { useState, useEffect, useMemo } from 'react'\nimport Table from '../Table/Table'\nimport styles from './Home.module.css'\n\nconst toFlag = (code) => {\n    switch (code) {\n        case \"ES\": return \"🇪🇸\";\n        case \"JP\": return \"🇯🇵\";\n        case \"GB\": return \"🇬🇧\";\n        case \"AR\": return \"🇦🇷\";\n        case \"CN\": return \"🇨🇳\";\n        case \"CH\": return \"🇨🇭\";\n        case \"IT\": return \"🇮🇹\";\n        case \"FR\": return \"🇫🇷\";\n        case \"US\": return \"🇺🇸\";\n        case \"DE\": return \"🇩🇪\";\n        case \"BR\": return \"🇧🇷\";\n        case \"KP\": return \"🇰🇵\";\n        case \"KR\": return \"🇰🇷\";\n        case \"SG\": return \"🇸🇬\";\n        case \"HN\": return \"🇭🇳\";\n        case \"CL\": return \"🇨🇱\";\n        default: return code;\n    }\n}\nconst nf = new Intl.NumberFormat();\n\nconst Home = () => {\n    const [data, setData] = useState([]);\n    const [country, setCountry] = useState(\"gb\")\n    useEffect(() => {\n        // 1. with then\n        // getData().then(d => {\n        //     console.log(\"got\", d);\n        //     setData(d);\n        // }).catch(e => { console.log(\"failed in fetch\", e.message) });\n\n        // 2. with function\n        // const fetchData = async () => {\n        //     try {\n        //         const result = await getData(country);\n        //         console.log(`got ${result.length}`)\n        //         setData(result);\n        //     } catch (e) {\n        //         setData([]);\n        //         console.log(`${e.name}:${e.message}`);\n        //     }\n        // }\n        // fetchData();\n\n        // 3. immediately executed function for async purpose\n        (async () => {\n            //try {\n            const result = await getData(country, 1000);\n            console.log(`got ${result.length}  for ${country}`)\n            setData(result);\n            //} catch (e) {\n            //    setData([]);\n            //    console.log(`${e.name}:${e.message}`);\n            //}\n        })().catch(e => {\n            setData([]);\n            console.error(`${e.name}:${e.message}`)\n        });\n    }, [country])\n    const handleCountryChange = (evt) => {\n        setCountry(evt.target.value);\n    }\n    const columns = useMemo(() => [\n        {\n            Header: \"Cities\",\n            columns: [\n                {\n                    Header: \"Name\",\n                    accessor: \"city\"\n                },\n                {\n                    Header: \"Name(admin)\",\n                    accessor: \"admin_name\"\n                },\n                {\n                    Header: \"Country\",\n                    accessor: \"country\"\n                },\n                {\n                    Header: \"Code\",\n                    accessor: \"iso2\",\n                    id: \"flag\",\n                    Cell: ({ cell: { value } }) => <span className=\"badge\">{value}</span>\n                },\n                {\n                    Header: \"Flag\",\n                    accessor: \"iso2\",\n                    Cell: ({ cell: { value } }) => toFlag(value)\n                },\n                {\n                    Header: \"Capital\",\n                    accessor: \"capital\"\n                }\n            ]\n        },\n        {\n            Header: \"Details\",\n            columns: [{\n                Header: \"Population\",\n                accessor: \"population\",\n                style: { \"text-align\": \"right\", color: \"pink\", background: \"green\" },\n                Cell: ({ cell: { value } }) => { return nf.format(value) }\n            },\n            {\n                Header: \"Population(Proper)\",\n                accessor: \"population_proper\",\n                Cell: props => {\n                    //console.log(props.cell);\n                    return <div style={{ \"textAlign\": 'right', \"color\": \"purple\", \"background\": \"lightblue\" }}>\n                        {nf.format(props.cell.value)}</div>\n                }\n            },\n            {\n                Header: \"Latitude\",\n                accessor: \"lat\"\n            },\n            {\n                Header: \"Longitudo\",\n                accessor: \"lng\"\n            }]\n        }\n    ], [])\n    return (\n        <>\n            <div className={styles.topRow}>\n                <div className={styles.topColumn}>Country/City Data</div>\n                <div className={styles.topColumn}>\n                    <select className={styles.selector}\n                        name='country' defaultValue={country} onChange={handleCountryChange}>\n                        <option value=\"ar\" name=\"ar\">Argentina</option>\n                        <option value=\"br\" name=\"br\">Brazil</option>\n                        <option value=\"ch\" name=\"ch\">Switzerland</option>\n                        <option value=\"cl\" name=\"cl\">Chile</option>\n                        <option value=\"cn\" name=\"cn\">China</option>\n                        <option value=\"de\" name=\"de\">Germany</option>\n                        <option value=\"es\" name=\"es\">Spain</option>\n                        <option value=\"fr\" name=\"fr\">France</option>\n                        <option value=\"gb\" name=\"gb\">UK</option>\n                        <option value=\"hk\" name=\"hk\">Hong Kong</option>\n                        <option value=\"hn\" name=\"hn\">Honduras</option>\n                        <option value=\"jp\" name=\"jp\">Japan</option>\n                        <option value=\"kp\" name=\"kp\">North Korea</option>\n                        <option value=\"kr\" name=\"kr\">South Korea</option>\n                        <option value=\"sg\" name=\"sg\">Singapore</option>\n                    </select>\n                </div>\n                <div className={styles.topColumn}>\n                    <a href='https://tnobile.github.io/data-world-cities/'>source</a>\n                </div>\n            </div>\n            {\n                data && data.length > 0 &&\n                <Table columns={columns} data={data}></Table>\n            }\n            { data && data.length === 0 && <h2>No data for {country}</h2>} </>\n    )\n}\n\n\nexport default Home;","import './App.css';\nimport Home from './components/Home/Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchColumn\":\"Table_searchColumn__12ie8\",\"searchRow\":\"Table_searchRow__2G96O\",\"pagination\":\"Table_pagination__10Psx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"Home_selector__2VNFS\",\"source\":\"Home_source__13bXq\",\"topColumn\":\"Home_topColumn__1oQlN\",\"topRow\":\"Home_topRow__9XaAO\"};"],"sourceRoot":""}