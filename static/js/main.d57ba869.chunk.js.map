{"version":3,"sources":["services/CityService.js","components/Table/Table.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js","components/Home/Home.module.css","components/Table/Table.module.css"],"names":["url","getData","country","a","maxCount","fetch","response","ok","message","status","Error","json","content","filter","f","i","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","Table","columns","data","useTable","useFilters","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","state","filterInput","setFilterInput","useEffect","console","log","className","styles","searchRow","searchColumn","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","getRowProps","cells","cell","getCellProps","nf","Intl","NumberFormat","Home","setData","setCountry","result","catch","error","name","useMemo","Header","accessor","id","Cell","code","toFlag","style","color","background","format","props","topRow","topColumn","selector","defaultValue","evt","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d57ba869.chunk.js","sourcesContent":["const url = \"https://tnobile.github.io/data-world-cities/\";\n\nexport const getData = async (country, maxCount = 100) => {\n    var response = await fetch(url + country);\n    if (!response.ok) {\n        const message = `An error has occured: ${response.status}`;\n        throw new Error(message);\n    }\n    var content = await response.json();\n    if (maxCount <= 0) {\n        return content;\n    }\n    return content.filter((f, i) => i < maxCount);\n}\n","import { useEffect, useState } from 'react'\nimport { useFilters, useGlobalFilter, useSortBy, useTable, useAsyncDebounce } from 'react-table'\nimport styles from './Table.module.css'\n\n\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <input\n            value={value || \"\"}\n            onChange={e => {\n                setValue(e.target.value);\n                onChange(e.target.value);\n            }}\n            placeholder={`Global search with ${count} records...`}\n        />\n    )\n}\n\nconst Table = ({ columns, data }) => {\n    const {\n        getTableProps, // table props from react-table\n        getTableBodyProps, // table body props from react-table\n        headerGroups, // headerGroups, if your table has groupings\n        rows, // rows for the table based on the data passed\n        prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\n        setFilter, // useFilter Hook \n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter\n\n    } = useTable({\n        columns,\n        data\n    },\n        useFilters,\n        useGlobalFilter,\n        useSortBy\n    );\n\n    const [filterInput, setFilterInput] = useState('');\n    const handleFilterChange = (e) => {\n        const value = e.target.value || undefined;\n        setFilter(\"city\", value);\n        setFilterInput(value);\n    }\n\n    useEffect(() => {\n        console.log(\"data changed\");\n    }, [data]);\n\n    return (\n        <>\n            <div className={styles.searchRow} >\n                <div className={styles.searchColumn}>\n                    <input\n                        value={filterInput}\n                        onChange={handleFilterChange}\n                        placeholder={\"Search city name\"}\n                    />\n                </div>\n                <div className={styles.searchColumn}>\n                    <GlobalFilter\n                        preGlobalFilteredRows={preGlobalFilteredRows}\n                        globalFilter={state.globalFilter}\n                        setGlobalFilter={setGlobalFilter}\n                    />\n                </div>\n            </div>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column =>\n                                <th\n                                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                                    className={\n                                        column.isSorted\n                                            ? column.isSortedDesc\n                                                ? \"sort-desc\"\n                                                : \"sort-asc\"\n                                            : \"\"}>\n                                    {column.render(\"Header\")}\n                                </th>\n                            )}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row);\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </>\n    );\n    // return (\n    //     <table>\n    //         <tbody>\n    //             {data.map((d, i) => <City key={i} row={i} city={d}></City>)}\n    //         </tbody>\n    //     </table>\n    // )\n}\n\nexport default Table;","import { getData } from '../../services/CityService'\nimport React, { useState, useEffect, useMemo } from 'react'\nimport Table from '../Table/Table'\nimport styles from './Home.module.css'\n\nconst toFlag = (code) => {\n    switch (code) {\n        case \"ES\": return \"🇪🇸\";\n        case \"JP\": return \"🇯🇵\";\n        case \"GB\": return \"🇬🇧\";\n        case \"AR\": return \"🇦🇷\";\n        case \"CN\": return \"🇨🇳\";\n        case \"CH\": return \"🇨🇭\";\n        case \"IT\": return \"🇮🇹\";\n        case \"FR\": return \"🇫🇷\";\n        case \"US\": return \"🇺🇸\";\n        case \"DE\": return \"🇩🇪\";\n        default: return code;\n    }\n}\nconst nf = new Intl.NumberFormat();\n\nconst Home = () => {\n    const [data, setData] = useState([]);\n    const [country, setCountry] = useState(\"gb\")\n    useEffect(() => {\n        // 1. with then\n        // getData().then(d => {\n        //     console.log(\"got\", d);\n        //     setData(d);\n        // }).catch(e => { console.log(\"failed in fetch\", e.message) });\n\n        // 2. with function\n        // const fetchData = async () => {\n        //     try {\n        //         const result = await getData(country);\n        //         console.log(`got ${result.length}`)\n        //         setData(result);\n        //     } catch (e) {\n        //         setData([]);\n        //         console.log(`${e.name}:${e.message}`);\n        //     }\n        // }\n        // fetchData();\n\n        // 3. immediately executed function for async purpose\n        (async () => {\n            //try {\n            const result = await getData(country, 100);\n            console.log(`got ${result.length}  for ${country}`)\n            setData(result);\n            //} catch (e) {\n            //    setData([]);\n            //    console.log(`${e.name}:${e.message}`);\n            //}\n        })().catch(e => {\n            setData([]);\n            console.error(`${e.name}:${e.message}`)\n        });\n    }, [country])\n    const handleCountryChange = (evt) => {\n        setCountry(evt.target.value);\n    }\n    const columns = useMemo(() => [\n        {\n            Header: \"Cities\",\n            columns: [\n                {\n                    Header: \"Name\",\n                    accessor: \"city\"\n                },\n                {\n                    Header: \"Name(admin)\",\n                    accessor: \"admin_name\"\n                },\n                {\n                    Header: \"Country\",\n                    accessor: \"country\"\n                },\n                {\n                    Header: \"Code\",\n                    accessor: \"iso2\",\n                    id: \"flag\",\n                    Cell: ({ cell: { value } }) => <span className=\"badge\">{value}</span>\n                },\n                {\n                    Header: \"Flag\",\n                    accessor: \"iso2\",\n                    Cell: ({ cell: { value } }) => toFlag(value)\n                },\n                {\n                    Header: \"Capital\",\n                    accessor: \"capital\"\n                }\n            ]\n        },\n        {\n            Header: \"Details\",\n            columns: [{\n                Header: \"Population\",\n                accessor: \"population\",\n                style: { \"text-align\": \"right\", color: \"pink\", background: \"green\" },\n                Cell: ({ cell: { value } }) => { return nf.format(value) }\n            },\n            {\n                Header: \"Population(Proper)\",\n                accessor: \"population_proper\",\n                Cell: props => {\n                    //console.log(props.cell);\n                    return <div style={{ \"textAlign\": 'right', \"color\": \"purple\", \"background\": \"lightblue\" }}>\n                        {nf.format(props.cell.value)}</div>\n                }\n            },\n            {\n                Header: \"Latitude\",\n                accessor: \"lat\"\n            },\n            {\n                Header: \"Longitudo\",\n                accessor: \"lng\"\n            }]\n        }\n    ], [])\n    return (\n        <>\n            <div className={styles.topRow}>\n                <div className={styles.topColumn}>Country/City Data</div>\n                <div className={styles.topColumn}>\n                    <select className={styles.selector}\n                        name='country' defaultValue={country} onChange={handleCountryChange}>\n                        <option value=\"jp\" name=\"jp\">Japan</option>\n                        <option value=\"gb\" name=\"gb\">UK</option>\n                        <option value=\"ch\" name=\"ch\">Switzerland</option>\n                        <option value=\"ar\" name=\"ar\">Argentina</option>\n                        <option value=\"cn\" name=\"cn\">China</option>\n                        <option value=\"de\" name=\"de\">Germany</option>\n                        <option value=\"es\" name=\"es\">Spain</option>\n                        <option value=\"fr\" name=\"fr\">France</option>\n                    </select>\n                </div>\n                <div className={styles.topColumn}>\n                    <a href='https://tnobile.github.io/data-world-cities/'>source</a>\n                </div>\n            </div>\n            {\n                data && data.length > 0 &&\n                <Table columns={columns} data={data}></Table>\n            }\n            { data && data.length === 0 && <h2>No data for {country}</h2>} </>\n    )\n}\n\n\nexport default Home;","import './App.css';\nimport Home from './components/Home/Home';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"Home_selector__2VNFS\",\"source\":\"Home_source__13bXq\",\"topColumn\":\"Home_topColumn__1oQlN\",\"topRow\":\"Home_topRow__9XaAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchColumn\":\"Table_searchColumn__3gpz4\",\"searchRow\":\"Table_searchRow__1qrvC\"};"],"sourceRoot":""}